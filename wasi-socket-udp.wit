
use { error, ip-address-family, ip-socket-address, usize } from common-types
use { network } from wasi-network
use { socket } from wasi-socket


record receive-result {
	bytes-received: usize,
	
	/// Similar to the `MSG_TRUNC` flag in POSIX.
	truncated: bool,
	remote-address: ip-socket-address,

	/// Possible future additions:
	/// local-address: ip-socket-address, // IP_PKTINFO / IP_RECVDSTADDR / IPV6_PKTINFO
	/// local-interface: u32, // IP_PKTINFO / IP_RECVIF
	/// ttl: u8, // IP_RECVTTL
	/// dscp: u6, // IP_RECVTOS
	/// ecn: u2, // IP_RECVTOS
}


/// Create a new UDP socket.
/// 
/// Similar to `socket(AF_INET or AF_INET6, SOCK_DGRAM, 0 or IPPROTO_UDP)` in POSIX.
/// 
/// References:
/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/socket.html
/// - https://man7.org/linux/man-pages/man2/socket.2.html
/// 
create-udp-socket: function(network: handle network, address-family: ip-address-family) -> expected<handle socket, error>

/// Bind the socket to a specific IP address and port.
///
/// If the IP address is zero (`0.0.0.0` in IPv4, `::` in IPv6), it is left to the implementation to decide which
/// network interface(s) to bind to.
/// If the TCP/UDP port is zero, the socket will be bound to a random free port.
/// 
/// When a socket is not explicitly bound, the first invocation to a send or receive operation will
/// implicitly bind the socket.
/// 
/// Returns an error if the socket is already bound.
/// 
/// TODO: disallow wildcard binds as long as there isn't a way to pass the local address to send & receive?
/// - https://blog.cloudflare.com/everything-you-ever-wanted-to-know-about-udp-sockets-but-were-afraid-to-ask-part-1/#sourcing-packets-from-a-wildcard-socket
/// - https://blog.powerdns.com/2012/10/08/on-binding-datagram-udp-sockets-to-the-any-addresses/
/// 
/// References
/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/bind.html
/// - https://man7.org/linux/man-pages/man2/bind.2.html
bind: async function(udp-socket: handle socket, local-address: ip-socket-address) -> expected<_, error>

/// Get the current bound address.
/// 
/// Returns an error if the socket is not bound.
/// 
/// References
/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/getsockname.html
/// - https://man7.org/linux/man-pages/man2/getsockname.2.html
local-address: function(udp-socket: handle socket) -> expected<ip-socket-address, error>

/// receive a message.
/// 
/// Returns:
/// - The sender address of the datagram
/// - The number of bytes read.
/// - When the received datagram is larger than the provided buffers,
///     the excess data is lost and the `truncated` flag will be set.
/// 
/// References
/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/recvfrom.html
/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/recvmsg.html
/// - https://man7.org/linux/man-pages/man2/recv.2.html
receive: async function(udp-socket: handle socket, iovs: push-buffer<u8>) -> expected<receive-result, error>

/// receive a message just like `receive`, but don't remove the message from the queue.
peek: async function(udp-socket: handle socket, iovs: push-buffer<u8>) -> expected<receive-result, error>

/// send a message to a specific destination address.
/// 
/// The remote address option is required. To send a message to the "connected" peer,
/// call `remote-address` to get their address.
/// 
/// Returns the number of bytes sent.
/// 
/// TODO: Does the returned number of bytes sent ever differ from the supplied buffer size for UDP sockets?
/// 
/// References
/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/sendto.html
/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/sendmsg.html
/// - https://man7.org/linux/man-pages/man2/send.2.html
send: async function(udp-socket: handle socket, iovs: pull-buffer<u8>, remote-address: ip-socket-address) -> expected<usize, error>

/// Set the destination address.
/// 
/// When a destination address is set:
/// - all receive operations will only return datagrams sent from the provided `remote-address`.
/// - the `send` function can still be used to send to any other destination, however you can't receive their response.
/// 
/// Similar to `connect(sock, ...)` in POSIX.
/// 
/// Note that this function does not generate any network traffic and the peer is not aware of this "connection".
/// 
/// TODO: "connect" is a rather odd name for this function because it doesn't reflect what's actually happening.
///     Feels like it was chosen just to shoehorn UDP into the existing Socket interface.
///     Do we have to keep this name?
/// 
/// TODO: add unconnect ability.
/// 
/// References
/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/connect.html
/// - https://man7.org/linux/man-pages/man2/connect.2.html
connect: async function(udp-socket: handle socket, remote-address: ip-socket-address) -> expected<_, error>

/// Get the address set with `connect`.
/// 
/// References
/// - https://pubs.opengroup.org/onlinepubs/9699919799/functions/getpeername.html
/// - https://man7.org/linux/man-pages/man2/getpeername.2.html
remote-address: function(udp-socket: handle socket) -> expected<ip-socket-address, error>