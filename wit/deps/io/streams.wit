/// WASI I/O is an I/O abstraction API which is currently focused on providing
/// stream types.
///
/// In the future, the component model is expected to add built-in stream types;
/// when it does, they are expected to subsume this API.
interface streams {
    use wasi:poll/poll.{pollable}

    /// An error type returned from a stream operation. Currently this
    /// doesn't provide any additional information.
    record stream-error {}

    /// Streams provide a sequence of data and then end; once they end, they
    /// no longer provide any further data.
    ///
    /// For example, a stream reading from a file ends when the stream reaches
    /// the end of the file. For another example, a stream reading from a
    /// socket ends when the socket is closed.
    enum stream-status {
        /// The stream is open and may produce further data.
        open,
        /// The stream has ended and will not produce any further data.
        ended,
    }

    /// An input bytestream.
    ///
    /// This conceptually represents a `stream<u8, _>`. It's temporary
    /// scaffolding until component-model's async features are ready.
    ///
    /// `input-stream`s are *non-blocking* to the extent practical on underlying
    /// platforms. I/O operations always return promptly; if fewer bytes are
    /// promptly available than requested, they return the number of bytes promptly
    /// available, which could even be zero. To wait for data to be available,
    /// use the `subscribe-to-input-stream` function to obtain a `pollable` which
    /// can be polled for using `wasi_poll`.
    resource input-stream {
        /// Read bytes from a stream.
        ///
        /// This function returns a list of bytes containing the data that was
        /// read, along with a `stream-status` which indicates whether the end of
        /// the stream was reached. The returned list will contain up to `len`
        /// bytes; it may return fewer than requested, but not more.
        ///
        /// Once a stream has reached the end, subsequent calls to read or
        /// `skip` will always report end-of-stream rather than producing more
        /// data.
        ///
        /// If `len` is 0, it represents a request to read 0 bytes, which should
        /// always succeed, assuming the stream hasn't reached its end yet, and
        /// return an empty list.
        ///
        /// The len here is a `u64`, but some callees may not be able to allocate
        /// a buffer as large as that would imply.
        /// FIXME: describe what happens if allocation fails.
        read: func(
            /// The maximum number of bytes to read
            len: u64
        ) -> result<tuple<list<u8>, stream-status>, stream-error>

        /// Read bytes from a stream, with blocking.
        ///
        /// This is similar to `read`, except that it blocks until at least one
        /// byte can be read.
        blocking-read: func(
            /// The maximum number of bytes to read
            len: u64
        ) -> result<tuple<list<u8>, stream-status>, stream-error>

        /// Skip bytes from a stream.
        ///
        /// This is similar to the `read` function, but avoids copying the
        /// bytes into the instance.
        ///
        /// Once a stream has reached the end, subsequent calls to read or
        /// `skip` will always report end-of-stream rather than producing more
        /// data.
        ///
        /// This function returns the number of bytes skipped, along with a
        /// `stream-status` indicating whether the end of the stream was
        /// reached. The returned value will be at most `len`; it may be less.
        skip: func(
            /// The maximum number of bytes to skip.
            len: u64,
        ) -> result<tuple<u64, stream-status>, stream-error>

        /// Skip bytes from a stream, with blocking.
        ///
        /// This is similar to `skip`, except that it blocks until at least one
        /// byte can be consumed.
        blocking-skip: func(
            /// The maximum number of bytes to skip.
            len: u64,
        ) -> result<tuple<u64, stream-status>, stream-error>

        /// Create a `pollable` which will resolve once either the specified stream
        /// has bytes available to read or the other end of the stream has been
        /// closed.
        subscribe-to-input-stream: func() -> pollable
    }

    /// An output bytestream.
    ///
    /// This conceptually represents a `stream<u8, _>`. It's temporary
    /// scaffolding until component-model's async features are ready.
    ///
    /// `output-stream`s are *non-blocking* to the extent practical on
    /// underlying platforms. Except where specified otherwise, I/O operations also
    /// always return promptly, after the number of bytes that can be written
    /// promptly, which could even be zero. To wait for the stream to be ready to
    /// accept data, the `subscribe-to-output-stream` function to obtain a
    /// `pollable` which can be polled for using `wasi_poll`.
    resource output-stream {
        /// Write bytes to a stream.
        ///
        /// This function returns a `u64` indicating the number of bytes from
        /// `buf` that were written; it may be less than the full list.
        write: func(
            /// Data to write
            buf: list<u8>
        ) -> result<u64, stream-error>

        /// Write bytes to a stream, with blocking.
        ///
        /// This is similar to `write`, except that it blocks until at least one
        /// byte can be written.
        blocking-write: func(
            /// Data to write
            buf: list<u8>
        ) -> result<u64, stream-error>

        /// Write multiple zero bytes to a stream.
        ///
        /// This function returns a `u64` indicating the number of zero bytes
        /// that were written; it may be less than `len`.
        write-zeroes: func(
            /// The number of zero bytes to write
            len: u64
        ) -> result<u64, stream-error>

        /// Write multiple zero bytes to a stream, with blocking.
        ///
        /// This is similar to `write-zeroes`, except that it blocks until at least
        /// one byte can be written.
        blocking-write-zeroes: func(
            /// The number of zero bytes to write
            len: u64
        ) -> result<u64, stream-error>

        /// Read from one stream and write to another.
        ///
        /// This function returns the number of bytes transferred; it may be less
        /// than `len`.
        ///
        /// Unlike other I/O functions, this function blocks until all the data
        /// read from the input stream has been written to the output stream.
        splice: func(
            /// The stream to read from
            src: input-stream,
            /// The number of bytes to splice
            len: u64,
        ) -> result<tuple<u64, stream-status>, stream-error>

        /// Read from one stream and write to another, with blocking.
        ///
        /// This is similar to `splice`, except that it blocks until at least
        /// one byte can be read.
        blocking-splice: func(
            /// The stream to read from
            src: input-stream,
            /// The number of bytes to splice
            len: u64,
        ) -> result<tuple<u64, stream-status>, stream-error>

        /// Forward the entire contents of an input stream to an output stream.
        ///
        /// This function repeatedly reads from the input stream and writes
        /// the data to the output stream, until the end of the input stream
        /// is reached, or an error is encountered.
        ///
        /// Unlike other I/O functions, this function blocks until the end
        /// of the input stream is seen and all the data has been written to
        /// the output stream.
        ///
        /// This function returns the number of bytes transferred.
        forward: func(
            /// The stream to read from
            src: input-stream
        ) -> result<u64, stream-error>

        /// Create a `pollable` which will resolve once either the specified stream
        /// is ready to accept bytes or the other end of the stream has been closed.
        subscribe-to-output-stream: func() -> pollable
    }
}
